
---------------------------------------------------------------------------------------------------------
	序号	|		名称	  |		内容
---------------------------------------------------------------------------------------------------------
			|				  |		定义：确保某一个类只有一个实例，并自行实例化向整个系统提供这个实例		
			|				  |		场景：要求一个类仅有一个对象（共享数据/创建消耗的资源过多/大量的静态）
	1		|	单例模式	  |		优点：减少内存开支、性能开销、避免多重占用
			|  SingletonMode  |		缺点：没有接口、扩展困难（不符合开闭原则）
			|				  |			  与单一职责原则有冲突
			|				  |		注：饿汉模式（直接实例化）、懒汉模式（构造函数中实例化）、
			|                 |			双检测锁（线程安全）
---------------------------------------------------------------------------------------------------------
	2		|	工厂模式	  |
			|  FactoryMode	  |
---------------------------------------------------------------------------------------------------------
	3		|	抽象工厂模式  |
			|  AbstractFactory|
---------------------------------------------------------------------------------------------------------
	4		|	模板方法模式  |
			|  TemplateMode   |
---------------------------------------------------------------------------------------------------------
	5		|	建造者模式	  |
			|  BuilderMode    |
---------------------------------------------------------------------------------------------------------
	6		|	代理模式	  |
			|   AgentMode     |
---------------------------------------------------------------------------------------------------------
	7		|	原型模式	  |
			|  PrototypeMode  |
---------------------------------------------------------------------------------------------------------
	8		|	中介者模式	  |
			| IntermediaryMode|
---------------------------------------------------------------------------------------------------------
	9		|	命令模式	  |
			|  CommandMode    |
---------------------------------------------------------------------------------------------------------
	10		|	责任链模式	  |
			|  Responsibility |
---------------------------------------------------------------------------------------------------------
	11		|	装饰模式	  |
			|  DecorativeMode |
---------------------------------------------------------------------------------------------------------
	12		|	策略模式	  |
			|   PolicyMode    |
---------------------------------------------------------------------------------------------------------
			|				  |		定义：将一个接口变成客户端期待的另一种接口。
			|				  |		使用场景：有动机修改一个已经投产的接口时
	13		|	适配器模式	  |		优点：提高了类的服用，增肌了透明度，灵活性好
			|   AdapterMode   |		缺点：使系统凌乱不容易把握
			|				  |		类适配器（作为基类）、对象适配器（属性/构造依赖注入）
---------------------------------------------------------------------------------------------------------